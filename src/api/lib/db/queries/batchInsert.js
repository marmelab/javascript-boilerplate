import valueSubQuery from './valueSubQuery';

export default (client, tableName, fields, idFieldName, idAutoGenerated, version, raw) => {
    const getValueSubQuery = valueSubQuery(fields, idAutoGenerated, idFieldName);

    return function* batchInsert(entities) {
        if (!entities) {
            throw new Error(`No data for batch inserting ${tableName} entities.`);
        }

        if (entities.length === 0) {
            return [];
        }

        const values = [];
        let parameters = {};

        const columns = raw ? fields : fields.filter(field =>
            (!idAutoGenerated && field !== idFieldName) &&
            typeof entities[0][field] !== 'undefined');

        entities.forEach((entity, index) => {
            const value = getValueSubQuery(entity, index + 1, null, raw);
            parameters = Object.assign({}, parameters, value.parameters);
            values.push(`(${value.query})`);
        });

        const query = `
            INSERT INTO ${tableName} (${columns.join(', ')})
            VALUES ${values.join(', ')}
            RETURNING ${fields.join(', ')}`;

        const savedEntities = (yield client.query_(query, parameters)).rows;

        if (version) {
            const historyPromises = savedEntities.map(entity => version(entity, 'insert', true));

            yield historyPromises;
        }

        return savedEntities;
    };
};
